generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRoleStaff {
  STAFF
  DIRECTOR
}

enum DisplayType {
  TRANSFER_AND_TICKET_SCREEN
  TICKET_SCREEN
  TRANSFER_SCREEN
}

enum ShowFor {
  BACKEND_AND_ONLINE
  BACKEND
  ONLINE
}

model User {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(100)
  email      String?  @unique @db.VarChar(100)
  phone      String?  @db.VarChar(20)
  password   String   @db.VarChar(100)
  isActive   Boolean  @default(true)
  image      String?  @db.VarChar(100)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  staff      Staff[]
  categories Category[]
  counters   Counter[]
  tickets    Ticket[]
  user_roles UserRole[]

  @@map("users")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(50)
  description String?  @db.VarChar(200)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user_roles UserRole[]

  @@map("roles")
}

model UserRole {
  user_id     Int
  role_id     Int
  assigned_at DateTime @default(now())
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  role        Role     @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([user_id, role_id])
  @@index([user_id])
  @@index([role_id])
  @@map("user_roles")
}

model Staff {
  id                          Int           @id @default(autoincrement())
  name                        String        @db.VarChar(100)
  contact                     String?       @db.VarChar(20)
  email                       String?       @unique @db.VarChar(100)
  username                    String        @unique @db.VarChar(50)
  password                    String
  address                     String?       @db.Text
  unique_id                   String?       @unique @db.VarChar(50)
  role                        UserRoleStaff @default(STAFF)
  show_next_button            Boolean       @default(false)
  enable_desktop_notification Boolean       @default(true)
  created_at                  DateTime      @default(now())
  updated_at                  DateTime      @updatedAt

  // Relación con Client
  client_id Int
  user      User @relation(fields: [client_id], references: [id])

  // Otras relaciones
  counter_id Int?
  counter    Counter?            @relation(fields: [counter_id], references: [id])
  categories CategoriesOnStaff[]

  @@map("staff")
}

model Counter {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(100)
  show_checkbox Boolean  @default(false)
  staff         Staff[]
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relación con Client
  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  @@map("counters")
}

model Category {
  id                                Int                 @id @default(autoincrement())
  name                              String              @db.VarChar(50)
  name_other_language               String?             @db.VarChar(50)
  description                       String?             @db.VarChar(200)
  acronym                           String?             @db.VarChar(10)
  display_on_transfer_ticket_screen Boolean             @default(true)
  display_on_backend_screen         Boolean             @default(true)
  sub_categories                    SubCategory[]
  priority                          Int?
  staff                             CategoriesOnStaff[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relación con Client
  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  // Relación: una categoría puede tener muchos tickets
  tickets Ticket[]

  @@map("categories")
}

model SubCategory {
  id                  Int         @id @default(autoincrement())
  name                String      @db.VarChar(100)
  name_other_language String?     @db.VarChar(100)
  description         String?     @db.VarChar(250)
  acronym             String?     @db.VarChar(10)
  display_type        DisplayType @default(TRANSFER_AND_TICKET_SCREEN)
  show_for            ShowFor     @default(BACKEND_AND_ONLINE)
  created_at          DateTime    @default(now())
  updated_at          DateTime    @updatedAt

  // Relación con Category
  category_id        Int
  category           Category         @relation(fields: [category_id], references: [id])
  sub_sub_categories SubSubCategory[]

  // Relación: Una SubCategory puede tener muchos tickets
  tickets Ticket[]

  @@map("sub_categories")
}

model SubSubCategory {
  id                  Int      @id @default(autoincrement())
  name                String   @db.VarChar(100)
  name_other_language String?  @db.VarChar(100)
  description         String?  @db.VarChar(250)
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  // Relación con SubCategory
  sub_category_id Int
  sub_category    SubCategory @relation(fields: [sub_category_id], references: [id])

  // Relación: Una SubSubCategory puede tener muchos tickets
  tickets Ticket[]

  @@map("sub_sub_categories")
}

model Ticket {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(100)
  phone      String?  @db.VarChar(20)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relación con Client
  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  // Relación con Category (obligatoria)
  category_id Int
  category    Category @relation(fields: [category_id], references: [id])

  // Relación con SubCategory (opcional)
  sub_category_id Int?
  sub_category    SubCategory? @relation(fields: [sub_category_id], references: [id])

  // Relación con SubSubCategory (opcional)
  sub_sub_category_id Int?
  sub_sub_category    SubSubCategory? @relation(fields: [sub_sub_category_id], references: [id])

  @@map("tickets")
}

model CategoriesOnStaff {
  staff_id    Int
  category_id Int
  assigned_at DateTime @default(now())
  staff       Staff    @relation(fields: [staff_id], references: [id])
  category    Category @relation(fields: [category_id], references: [id])

  @@id([staff_id, category_id])
  @@map("categories_on_staff")
}
